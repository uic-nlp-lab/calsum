# description: command line configuration

[calsum_default]
results_dir = ~/Desktop/amr-graph

[cli]
apps = list: ${cli_config_default:apps}, ${cli_deeplearn_default:apps},
  show_config_cli, clear_cli, app, sapp
cleanups = list: ${cli_config_default:cleanups}, ${cli_deeplearn_default:cleanups},
  show_config_cli, app, sapp
cleanup_removes = list: log_cli

[log_cli]
#format = %%(levelname)s:%%(module)s:%%(message)s
format = %%(levelname)s:%%(name)s:%%(message)s
default_app_level = info
loggers = dict: {
  'transformers': 'err',
  'zensols.cli.lib': 'info',
  'zensols.cli.lib.config': 'info',
  'zensols.nlp.combine': 'warn',
  'zensols.datdesc': 'info',
  'zensols.mednlp': 'info',
  'zensols.mimic': 'info',
  'zensols.amr.docparser': 'info',
  'zensols.amr.coref': 'info',
  'zensols.amrspring': 'warn',
  'zensols.clinicamr': 'info',
  'zensols.calamr': 'info',
  'zensols.calamr.domain': 'warn',
  'zensols.calsum.model': 'info'}

[multiprocess_log_config]
section = log_cli

[clear_cli]
class_name = zensols.cli.CacheClearer
clearables = tuple:
  mimic_default:clearables,
  amr_default:clearables,
  clinicamr_default:clearables,
  calamr_default:clearables,
  calsum_default:clearables

[import]
config_files = list:
  resource(zensols.util): resources/default.conf,
  resource(zensols.util): resources/escape.conf,
  resource(zensols.util): resources/cli.conf,
  resource(zensols.util): resources/cli-config.conf,
  resource(zensols.util): resources/cleaner.conf,
  resource(zensols.deeplearn): resources/cli.conf


[config_cli]
expect = False
cache_path = path: ${default:data_dir}/app-config.dat

[config_import]
references = list: conf_esc, package, default
sections = list: app_conf_imp

[app_conf_imp]
type_map = dict: {'yml': 'condyaml', 'conf': 'importini'}
config_files = list: 
  ^{config_path}, ^{override},
  resource(zensols.deeplearn): resources/default.conf,
  resource(zensols.deepnlp): resources/default.conf,
  resource(zensols.mednlp): resources/default.conf,
  resource(zensols.mimic): resources/default.conf,
  resource(zensols.mimicsid): resources/default.conf,
  resource(zensols.amr): resources/default.conf,
  resource(zensols.amrspring): resources/default.conf,
  resource(zensols.clinicamr): resources/default.conf,
  resource(zensols.propbankdb): resources/default.conf,
  resource(zensols.rend): resources/default.conf,
  resource(zensols.calamr): resources/default.conf,
  resource(zensols.alsum): resources/default.conf,
  resource(zensols.calsum): resources/default.conf,
  ^{config_path}, ^{override},
  resource(zensols.nlp): resources/obj.conf,
  resource(zensols.nlp): resources/mapper.conf,
  resource(zensols.nlp): resources/mapper.conf,
  resource(zensols.nlp): resources/score.yml,
  resource(zensols.deeplearn): resources/obj.conf,
  resource(zensols.deepnlp): resources/obj.conf,
  resource(zensols.deepnlp): resources/embed-crf.conf,
  resource(zensols.mednlp): resources/install.conf,
  resource(zensols.mednlp): resources/lang.conf,
  resource(zensols.mednlp): resources/filter-medical.conf,
  resource(zensols.mednlp): resources/entlink.conf,
  resource(zensols.mimic): resources/obj.conf,
  resource(zensols.mimic): resources/decorator.conf,
  resource(zensols.mimicsid): resources/anon.conf,
  resource(zensols.mimicsid): resources/obj.conf,
  resource(zensols.mimicsid): resources/lang.yml,
  resource(zensols.mimicsid): resources/adm.conf,
  resource(zensols.amr): resources/obj.conf,
  resource(zensols.amr): resources/annotate.conf,
  resource(zensols.amr): resources/align.yml,
  resource(zensols.amr): resources/coref.conf,
  resource(zensols.amr): resources/model/inference.conf,
  resource(zensols.amrspring): resources/obj.yml,
  resource(zensols.clinicamr): resources/adm-selection.conf,
  resource(zensols.clinicamr): resources/obj.yml,
  resource(zensols.propbankdb): resources/obj.yml,
  resource(zensols.propbankdb): resources/embed.yml,
  resource(zensols.rend): resources/obj.conf,
  resource(zensols.calamr): resources/obj.conf,
  resource(zensols.calamr): resources/corpus.conf,
  resource(zensols.alsum): resources/obj.yml,
  resource(zensols.calsum): resources/vec-labels.conf,
  resource(zensols.calsum): resources/obj.yml,
  resource(zensols.calsum): resources/sentseq.yml,
  resource(zensols.calsum): resources/feature.yml,
  resource(zensols.calsum): resources/matchemb.yml,
  ^{config_path}, ^{override}

[app]
class_name = zensols.calsum.Application
resource = instance: calamr_resource
results_dir = path: ${calsum_default:results_dir}
_sent_match_factory_stash = instance: calsum_sent_match_factory_stash
_sent_match_stash = instance: calsum_sent_match_stash
_generator = instance: calsum_summary_generator

[app_decorator]
option_excludes = set: resource, sent_match_stash,
  _sent_match_factory_stash, _sent_match_stash, _generator, results_dir
mnemonic_overrides = dict: {
  'delete_alignment_errors': 'rmalignerrs',
  'delete_match_errors': 'rmmatcherrs',
  'write': 'show',
  'create_annotation_file': 'afile',
  'align_render': 'render',
  'generate_summaries': 'generate'}

[sapp]
class_name = zensols.calsum.reporter.ReportApplication
reporters = instance: dict: {
  'perf': 'calsum_perf_reporter',
  'dataset': 'calsum_dataset_reporter'}

[sapp_decorator]
option_excludes = set: reporters

[capp]
class_name = zensols.calamr.CorpusApplication
resource = instance: calamr_resource
results_dir = path: ${calsum_default:results_dir}

[capp_decorator]
option_excludes = set: config_factory, doc_parser, anon_doc_stash,
  serialized_factory, doc_graph_factory, doc_graph_aligner, results_dir,
  doc_scorer, result_analyzer
option_overrides = dict: {
  'output_file': {'long_name': 'output', 'short_name': 'o'},
  'output_dir': {'long_name': 'outdir', 'short_name': 'o',
                  'metavar': 'DIR',
                  'default': '${calsum_default:results_dir}'},
  'report_file': {'long_name': 'agg', 'short_name': None,
                   'default': '${calsum_default:results_dir}'},
  'output_format': {'long_name': 'format', 'short_name': 'f'},
  'render_level': {'long_name': 'rendlevel', 'short_name': 'r'},
  'use_cached': {'long_name': 'cached', 'short_name': None},
  'keys': {'metavar': '<STRING|ALL>'}}
mnemonic_overrides = dict: {
  'write_adhoc_corpus': 'mkadhoc',
  'write_keys': 'keys',
  'dump_annotated': 'dump',
  'align_corpus': 'aligncorp',
  'create_mismatch_proxy_corpus': 'miscorp',
  'clear_doc_cache': 'cleardoc'}
mnemonic_excludes = set: get_annotated_summary
